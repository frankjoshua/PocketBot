/*
*
* Updated on 7/22/16
*
* Holds common gradle tasks for Tesseract Mobile
*
 */


//http://stackoverflow.com/questions/21414399/android-gradle-dynamically-change-versionname-at-build-time
ext {
    versionFile = new File(project.rootDir, 'version.properties')
    calculateVersionName = {
        def version = readVersion()
        return "${version['major']}.${version['minor']}.${version['build']}"
    }
    calculateVersionCode = {
        def version = readVersion()
        def major = version['major'] as int // 1..âˆž
        def minor = version['minor'] as int // 0..99
        def build = version['build'] as int // 0..999
        return (major * 100 + minor) * 1000 + build
    }
    calculateLastMinorVersionName = {
        def version = readVersion()
        return "${version['major']}.${version['minor']}.0"
    }
    readGameDataVersion = {
        def version = readVersion()
        return version['game_data_db_version']
    }
}


Properties readVersion() {
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {
    } finally {
        if (stream != null) stream.close()
    }
    // safety defaults in case file is missing
    if(!version['major']) version['major'] = "1"
    if(!version['minor']) version['minor'] = "0"
    if(!version['build']) version['build'] = "0"
    if(!version['game_data_db_version']) version['game_data_db_version'] = "1"
    return version
}

void incrementGameDataVersion() {
    def version = readVersion()

    // careful with the types, culprits: "9"++ = ":", "9" + 1 = "91"
    def dbVersion = version['game_data_db_version'] as int
    dbVersion++
    version['game_data_db_version'] = dbVersion.toString()

    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }
}

void incrementVersionNumber() {
    def version = readVersion()

    // careful with the types, culprits: "9"++ = ":", "9" + 1 = "91"
    def build = version['build'] as int
    build++
    version['build'] = build.toString()

    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }
}

void saveCurrentVersion() {
    def currentVersionFile = new File(project.rootDir, 'version.txt')
    currentVersionFile.text = calculateVersionName()
}

void incrementMinorNumber() {
    def version = readVersion()

    // careful with the types, culprits: "9"++ = ":", "9" + 1 = "91"
    def minor = version['minor'] as int
    minor++
    version['minor'] = minor.toString()

    version['build'] = "0"

    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }
}

task incrementVersion {
    description "Increments build counter in ${versionFile}"
    doFirst {
        println "Current Version: ${calculateVersionName()}"
        incrementVersionNumber()
        println "New Version: ${calculateVersionName()}"
        saveCurrentVersion()
    }
}

task incrementReleaseVersion {
    description "Increments minor counter in ${versionFile}"
    doFirst {
        println "Current Version: ${calculateVersionName()}"
        incrementMinorNumber();
        println "Release Version: ${calculateVersionName()}"
        saveCurrentVersion()
    }
}

task incrementGameDataVersion {
    description "Increments the game data version in ${versionFile}"
    doFirst {
        println "Current Database Version: ${readGameDataVersion()}"
        incrementGameDataVersion();
        println "Release Database Version: ${readGameDataVersion()}"
    }
}

task pushRelease(type: Exec){
    description "Sets the SOLITAIRE_VERSION environmental variable for scripts to use"
    commandLine 'cmd', '/c', 'push_release', "${calculateVersionName()}"
}

task customFindbugs(type: FindBugs) {
    ignoreFailures = false
    effort = "max"
    reportLevel = "low"
    classes = files("$project.buildDir/intermediates/classes")
//Use this only if you want exclude some errors
    //excludeFilter = file("$rootProject.rootDir/config/findbugs/exclude.xml")

    source = fileTree('src/main/java/')
    classpath = files()
    reports {
        xml.enabled = true
        xml.withMessages = true
        html.enabled = !xml.isEnabled()
        xml.destination "$project.buildDir/outputs/findbugs/findbugs-output.xml"
        html.destination "$project.buildDir/outputs/findbugs/findbugs-output.html"
    }
}

task grantPermissions(){
    description "Allows permissions to work with Marshmallow"
    def adb = android.getAdbExe().toString()
    def applicationId = "com.tesseractmobile.pocketbot"
    "${adb} shell pm grant ${applicationId} android.permission.RECORD_AUDIO".execute()
    "${adb} shell pm grant ${applicationId} android.permission.CAMERA".execute()
}

/*
 * Calls the upload_to_google_play.sh script
 */
task uploadToGooglePlay(type:Exec){
    def version = readVersion()
    commandLine "./upload_to_google_play.sh", "--apk ./release_apk/PocketBot-release-${version['major']}.${version['minor']}.${version['build']}.apk --track rollout --rollout 0.05"
}


println "Version code: ${calculateVersionCode()}, Version name: ${calculateVersionName()}"
